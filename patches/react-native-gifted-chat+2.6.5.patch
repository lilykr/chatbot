diff --git a/node_modules/react-native-gifted-chat/lib/Bubble.d.ts b/node_modules/react-native-gifted-chat/lib/Bubble.d.ts
index dab73ab..4aec72f 100644
--- a/node_modules/react-native-gifted-chat/lib/Bubble.d.ts
+++ b/node_modules/react-native-gifted-chat/lib/Bubble.d.ts
@@ -1,148 +1,288 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import { StyleProp, ViewStyle, TextStyle } from 'react-native';
-import { QuickRepliesProps } from './QuickReplies';
-import { MessageTextProps } from './MessageText';
-import { MessageImageProps } from './MessageImage';
-import { TimeProps } from './Time';
-import { User, IMessage, LeftRightStyle, Reply, Omit, MessageVideoProps, MessageAudioProps } from './Models';
-export type RenderMessageImageProps<TMessage extends IMessage> = Omit<BubbleProps<TMessage>, 'containerStyle' | 'wrapperStyle'> & MessageImageProps<TMessage>;
-export type RenderMessageVideoProps<TMessage extends IMessage> = Omit<BubbleProps<TMessage>, 'containerStyle' | 'wrapperStyle'> & MessageVideoProps<TMessage>;
-export type RenderMessageAudioProps<TMessage extends IMessage> = Omit<BubbleProps<TMessage>, 'containerStyle' | 'wrapperStyle'> & MessageAudioProps<TMessage>;
-export type RenderMessageTextProps<TMessage extends IMessage> = Omit<BubbleProps<TMessage>, 'containerStyle' | 'wrapperStyle'> & MessageTextProps<TMessage>;
+import type PropTypes from "prop-types";
+import React from "react";
+import type { StyleProp, TextStyle, ViewStyle } from "react-native";
+import type { MessageImageProps } from "./MessageImage";
+import type { MessageTextProps } from "./MessageText";
+import type {
+	IMessage,
+	LeftRightStyle,
+	MessageAudioProps,
+	MessageVideoProps,
+	Omit,
+	Reply,
+	User,
+} from "./Models";
+import type { QuickRepliesProps } from "./QuickReplies";
+import type { TimeProps } from "./Time";
+export type RenderMessageImageProps<TMessage extends IMessage> = Omit<
+	BubbleProps<TMessage>,
+	"containerStyle" | "wrapperStyle"
+> &
+	MessageImageProps<TMessage>;
+export type RenderMessageVideoProps<TMessage extends IMessage> = Omit<
+	BubbleProps<TMessage>,
+	"containerStyle" | "wrapperStyle"
+> &
+	MessageVideoProps<TMessage>;
+export type RenderMessageAudioProps<TMessage extends IMessage> = Omit<
+	BubbleProps<TMessage>,
+	"containerStyle" | "wrapperStyle"
+> &
+	MessageAudioProps<TMessage>;
+export type RenderMessageTextProps<TMessage extends IMessage> = Omit<
+	BubbleProps<TMessage>,
+	"containerStyle" | "wrapperStyle"
+> &
+	MessageTextProps<TMessage>;
 export interface BubbleProps<TMessage extends IMessage> {
-    user?: User;
-    touchableProps?: object;
-    renderUsernameOnMessage?: boolean;
-    isCustomViewBottom?: boolean;
-    inverted?: boolean;
-    position: 'left' | 'right';
-    currentMessage: TMessage;
-    nextMessage?: TMessage;
-    previousMessage?: TMessage;
-    optionTitles?: string[];
-    containerStyle?: LeftRightStyle<ViewStyle>;
-    wrapperStyle?: LeftRightStyle<ViewStyle>;
-    textStyle?: LeftRightStyle<TextStyle>;
-    bottomContainerStyle?: LeftRightStyle<ViewStyle>;
-    tickStyle?: StyleProp<TextStyle>;
-    containerToNextStyle?: LeftRightStyle<ViewStyle>;
-    containerToPreviousStyle?: LeftRightStyle<ViewStyle>;
-    usernameStyle?: TextStyle;
-    quickReplyStyle?: StyleProp<ViewStyle>;
-    quickReplyTextStyle?: StyleProp<TextStyle>;
-    quickReplyContainerStyle?: StyleProp<ViewStyle>;
-    onPress?(context?: unknown, message?: unknown): void;
-    onLongPress?(context?: unknown, message?: unknown): void;
-    onQuickReply?(replies: Reply[]): void;
-    renderMessageImage?(props: RenderMessageImageProps<TMessage>): React.ReactNode;
-    renderMessageVideo?(props: RenderMessageVideoProps<TMessage>): React.ReactNode;
-    renderMessageAudio?(props: RenderMessageAudioProps<TMessage>): React.ReactNode;
-    renderMessageText?(props: RenderMessageTextProps<TMessage>): React.ReactNode;
-    renderCustomView?(bubbleProps: BubbleProps<TMessage>): React.ReactNode;
-    renderTime?(timeProps: TimeProps<TMessage>): React.ReactNode;
-    renderTicks?(currentMessage: TMessage): React.ReactNode;
-    renderUsername?(user?: TMessage['user']): React.ReactNode;
-    renderQuickReplySend?(): React.ReactNode;
-    renderQuickReplies?(quickReplies: QuickRepliesProps<TMessage>): React.ReactNode;
+	user?: User;
+	touchableProps?: object;
+	renderUsernameOnMessage?: boolean;
+	isCustomViewBottom?: boolean;
+	inverted?: boolean;
+	position: "left" | "right";
+	currentMessage: TMessage;
+	nextMessage?: TMessage;
+	previousMessage?: TMessage;
+	optionTitles?: string[];
+	containerStyle?: LeftRightStyle<ViewStyle>;
+	wrapperStyle?: LeftRightStyle<ViewStyle>;
+	textStyle?: LeftRightStyle<TextStyle>;
+	bottomContainerStyle?: LeftRightStyle<ViewStyle>;
+	tickStyle?: StyleProp<TextStyle>;
+	containerToNextStyle?: LeftRightStyle<ViewStyle>;
+	containerToPreviousStyle?: LeftRightStyle<ViewStyle>;
+	usernameStyle?: TextStyle;
+	quickReplyStyle?: StyleProp<ViewStyle>;
+	quickReplyTextStyle?: StyleProp<TextStyle>;
+	quickReplyContainerStyle?: StyleProp<ViewStyle>;
+	customWrapper?: LeftRightStyle<React.ComponentType<any>>;
+	customWrapperProps?: LeftRightStyle<Record<string, any>>;
+	onPress?(context?: unknown, message?: unknown): void;
+	onLongPress?(context?: unknown, message?: unknown): void;
+	onQuickReply?(replies: Reply[]): void;
+	renderMessageImage?(
+		props: RenderMessageImageProps<TMessage>,
+	): React.ReactNode;
+	renderMessageVideo?(
+		props: RenderMessageVideoProps<TMessage>,
+	): React.ReactNode;
+	renderMessageAudio?(
+		props: RenderMessageAudioProps<TMessage>,
+	): React.ReactNode;
+	renderMessageText?(props: RenderMessageTextProps<TMessage>): React.ReactNode;
+	renderCustomView?(bubbleProps: BubbleProps<TMessage>): React.ReactNode;
+	renderTime?(timeProps: TimeProps<TMessage>): React.ReactNode;
+	renderTicks?(currentMessage: TMessage): React.ReactNode;
+	renderUsername?(user?: TMessage["user"]): React.ReactNode;
+	renderQuickReplySend?(): React.ReactNode;
+	renderQuickReplies?(
+		quickReplies: QuickRepliesProps<TMessage>,
+	): React.ReactNode;
 }
-export default class Bubble<TMessage extends IMessage = IMessage> extends React.Component<BubbleProps<TMessage>> {
-    static contextType: React.Context<import("./GiftedChatContext").IGiftedChatContext>;
-    static defaultProps: {
-        touchableProps: {};
-        onPress: null;
-        onLongPress: null;
-        renderMessageImage: null;
-        renderMessageVideo: null;
-        renderMessageAudio: null;
-        renderMessageText: null;
-        renderCustomView: null;
-        renderUsername: null;
-        renderTicks: null;
-        renderTime: null;
-        renderQuickReplies: null;
-        onQuickReply: null;
-        position: string;
-        currentMessage: {
-            text: null;
-            createdAt: null;
-            image: null;
-        };
-        nextMessage: {};
-        previousMessage: {};
-        containerStyle: {};
-        wrapperStyle: {};
-        bottomContainerStyle: {};
-        tickStyle: {};
-        usernameStyle: {};
-        containerToNextStyle: {};
-        containerToPreviousStyle: {};
-    };
-    static propTypes: {
-        user: PropTypes.Validator<object>;
-        touchableProps: PropTypes.Requireable<object>;
-        onLongPress: PropTypes.Requireable<(...args: any[]) => any>;
-        renderMessageImage: PropTypes.Requireable<(...args: any[]) => any>;
-        renderMessageVideo: PropTypes.Requireable<(...args: any[]) => any>;
-        renderMessageAudio: PropTypes.Requireable<(...args: any[]) => any>;
-        renderMessageText: PropTypes.Requireable<(...args: any[]) => any>;
-        renderCustomView: PropTypes.Requireable<(...args: any[]) => any>;
-        isCustomViewBottom: PropTypes.Requireable<boolean>;
-        renderUsernameOnMessage: PropTypes.Requireable<boolean>;
-        renderUsername: PropTypes.Requireable<(...args: any[]) => any>;
-        renderTime: PropTypes.Requireable<(...args: any[]) => any>;
-        renderTicks: PropTypes.Requireable<(...args: any[]) => any>;
-        renderQuickReplies: PropTypes.Requireable<(...args: any[]) => any>;
-        onQuickReply: PropTypes.Requireable<(...args: any[]) => any>;
-        position: PropTypes.Requireable<string>;
-        optionTitles: PropTypes.Requireable<(string | null | undefined)[]>;
-        currentMessage: PropTypes.Requireable<object>;
-        nextMessage: PropTypes.Requireable<object>;
-        previousMessage: PropTypes.Requireable<object>;
-        containerStyle: PropTypes.Requireable<PropTypes.InferProps<{
-            left: PropTypes.Requireable<NonNullable<number | boolean | object | null | undefined>>;
-            right: PropTypes.Requireable<NonNullable<number | boolean | object | null | undefined>>;
-        }>>;
-        wrapperStyle: PropTypes.Requireable<PropTypes.InferProps<{
-            left: PropTypes.Requireable<NonNullable<number | boolean | object | null | undefined>>;
-            right: PropTypes.Requireable<NonNullable<number | boolean | object | null | undefined>>;
-        }>>;
-        bottomContainerStyle: PropTypes.Requireable<PropTypes.InferProps<{
-            left: PropTypes.Requireable<NonNullable<number | boolean | object | null | undefined>>;
-            right: PropTypes.Requireable<NonNullable<number | boolean | object | null | undefined>>;
-        }>>;
-        tickStyle: PropTypes.Requireable<NonNullable<number | boolean | object | null | undefined>>;
-        usernameStyle: PropTypes.Requireable<NonNullable<number | boolean | object | null | undefined>>;
-        containerToNextStyle: PropTypes.Requireable<PropTypes.InferProps<{
-            left: PropTypes.Requireable<NonNullable<number | boolean | object | null | undefined>>;
-            right: PropTypes.Requireable<NonNullable<number | boolean | object | null | undefined>>;
-        }>>;
-        containerToPreviousStyle: PropTypes.Requireable<PropTypes.InferProps<{
-            left: PropTypes.Requireable<NonNullable<number | boolean | object | null | undefined>>;
-            right: PropTypes.Requireable<NonNullable<number | boolean | object | null | undefined>>;
-        }>>;
-    };
-    onPress: () => void;
-    onLongPress: () => void;
-    styledBubbleToNext(): (StyleProp<ViewStyle> | {
-        borderBottomLeftRadius: number;
-    } | {
-        borderBottomRightRadius: number;
-    })[] | null;
-    styledBubbleToPrevious(): (StyleProp<ViewStyle> | {
-        borderTopLeftRadius: number;
-    } | {
-        borderTopRightRadius: number;
-    })[] | null;
-    renderQuickReplies(): string | number | boolean | React.JSX.Element | Iterable<React.ReactNode> | null | undefined;
-    renderMessageText(): string | number | boolean | React.JSX.Element | Iterable<React.ReactNode> | null | undefined;
-    renderMessageImage(): string | number | boolean | React.JSX.Element | Iterable<React.ReactNode> | null | undefined;
-    renderMessageVideo(): string | number | boolean | React.JSX.Element | Iterable<React.ReactNode> | null | undefined;
-    renderMessageAudio(): string | number | boolean | React.JSX.Element | Iterable<React.ReactNode> | null | undefined;
-    renderTicks(): string | number | boolean | React.JSX.Element | Iterable<React.ReactNode> | null | undefined;
-    renderTime(): string | number | boolean | React.JSX.Element | Iterable<React.ReactNode> | null | undefined;
-    renderUsername(): string | number | boolean | React.JSX.Element | Iterable<React.ReactNode> | null | undefined;
-    renderCustomView(): React.ReactNode;
-    renderBubbleContent(): React.JSX.Element;
-    render(): React.JSX.Element;
+export default class Bubble<
+	TMessage extends IMessage = IMessage,
+> extends React.Component<BubbleProps<TMessage>> {
+	static contextType: React.Context<
+		import("./GiftedChatContext").IGiftedChatContext
+	>;
+	static defaultProps: {
+		touchableProps: {};
+		onPress: null;
+		onLongPress: null;
+		renderMessageImage: null;
+		renderMessageVideo: null;
+		renderMessageAudio: null;
+		renderMessageText: null;
+		renderCustomView: null;
+		renderUsername: null;
+		renderTicks: null;
+		renderTime: null;
+		renderQuickReplies: null;
+		onQuickReply: null;
+		position: string;
+		currentMessage: {
+			text: null;
+			createdAt: null;
+			image: null;
+		};
+		nextMessage: {};
+		previousMessage: {};
+		containerStyle: {};
+		wrapperStyle: {};
+		bottomContainerStyle: {};
+		tickStyle: {};
+		usernameStyle: {};
+		containerToNextStyle: {};
+		containerToPreviousStyle: {};
+	};
+	static propTypes: {
+		user: PropTypes.Validator<object>;
+		touchableProps: PropTypes.Requireable<object>;
+		onLongPress: PropTypes.Requireable<(...args: any[]) => any>;
+		renderMessageImage: PropTypes.Requireable<(...args: any[]) => any>;
+		renderMessageVideo: PropTypes.Requireable<(...args: any[]) => any>;
+		renderMessageAudio: PropTypes.Requireable<(...args: any[]) => any>;
+		renderMessageText: PropTypes.Requireable<(...args: any[]) => any>;
+		renderCustomView: PropTypes.Requireable<(...args: any[]) => any>;
+		isCustomViewBottom: PropTypes.Requireable<boolean>;
+		renderUsernameOnMessage: PropTypes.Requireable<boolean>;
+		renderUsername: PropTypes.Requireable<(...args: any[]) => any>;
+		renderTime: PropTypes.Requireable<(...args: any[]) => any>;
+		renderTicks: PropTypes.Requireable<(...args: any[]) => any>;
+		renderQuickReplies: PropTypes.Requireable<(...args: any[]) => any>;
+		onQuickReply: PropTypes.Requireable<(...args: any[]) => any>;
+		position: PropTypes.Requireable<string>;
+		optionTitles: PropTypes.Requireable<(string | null | undefined)[]>;
+		currentMessage: PropTypes.Requireable<object>;
+		nextMessage: PropTypes.Requireable<object>;
+		previousMessage: PropTypes.Requireable<object>;
+		containerStyle: PropTypes.Requireable<
+			PropTypes.InferProps<{
+				left: PropTypes.Requireable<
+					NonNullable<number | boolean | object | null | undefined>
+				>;
+				right: PropTypes.Requireable<
+					NonNullable<number | boolean | object | null | undefined>
+				>;
+			}>
+		>;
+		wrapperStyle: PropTypes.Requireable<
+			PropTypes.InferProps<{
+				left: PropTypes.Requireable<
+					NonNullable<number | boolean | object | null | undefined>
+				>;
+				right: PropTypes.Requireable<
+					NonNullable<number | boolean | object | null | undefined>
+				>;
+			}>
+		>;
+		bottomContainerStyle: PropTypes.Requireable<
+			PropTypes.InferProps<{
+				left: PropTypes.Requireable<
+					NonNullable<number | boolean | object | null | undefined>
+				>;
+				right: PropTypes.Requireable<
+					NonNullable<number | boolean | object | null | undefined>
+				>;
+			}>
+		>;
+		tickStyle: PropTypes.Requireable<
+			NonNullable<number | boolean | object | null | undefined>
+		>;
+		usernameStyle: PropTypes.Requireable<
+			NonNullable<number | boolean | object | null | undefined>
+		>;
+		containerToNextStyle: PropTypes.Requireable<
+			PropTypes.InferProps<{
+				left: PropTypes.Requireable<
+					NonNullable<number | boolean | object | null | undefined>
+				>;
+				right: PropTypes.Requireable<
+					NonNullable<number | boolean | object | null | undefined>
+				>;
+			}>
+		>;
+		containerToPreviousStyle: PropTypes.Requireable<
+			PropTypes.InferProps<{
+				left: PropTypes.Requireable<
+					NonNullable<number | boolean | object | null | undefined>
+				>;
+				right: PropTypes.Requireable<
+					NonNullable<number | boolean | object | null | undefined>
+				>;
+			}>
+		>;
+	};
+	onPress: () => void;
+	onLongPress: () => void;
+	styledBubbleToNext():
+		| (
+				| StyleProp<ViewStyle>
+				| {
+						borderBottomLeftRadius: number;
+				  }
+				| {
+						borderBottomRightRadius: number;
+				  }
+		  )[]
+		| null;
+	styledBubbleToPrevious():
+		| (
+				| StyleProp<ViewStyle>
+				| {
+						borderTopLeftRadius: number;
+				  }
+				| {
+						borderTopRightRadius: number;
+				  }
+		  )[]
+		| null;
+	renderQuickReplies():
+		| string
+		| number
+		| boolean
+		| React.JSX.Element
+		| Iterable<React.ReactNode>
+		| null
+		| undefined;
+	renderMessageText():
+		| string
+		| number
+		| boolean
+		| React.JSX.Element
+		| Iterable<React.ReactNode>
+		| null
+		| undefined;
+	renderMessageImage():
+		| string
+		| number
+		| boolean
+		| React.JSX.Element
+		| Iterable<React.ReactNode>
+		| null
+		| undefined;
+	renderMessageVideo():
+		| string
+		| number
+		| boolean
+		| React.JSX.Element
+		| Iterable<React.ReactNode>
+		| null
+		| undefined;
+	renderMessageAudio():
+		| string
+		| number
+		| boolean
+		| React.JSX.Element
+		| Iterable<React.ReactNode>
+		| null
+		| undefined;
+	renderTicks():
+		| string
+		| number
+		| boolean
+		| React.JSX.Element
+		| Iterable<React.ReactNode>
+		| null
+		| undefined;
+	renderTime():
+		| string
+		| number
+		| boolean
+		| React.JSX.Element
+		| Iterable<React.ReactNode>
+		| null
+		| undefined;
+	renderUsername():
+		| string
+		| number
+		| boolean
+		| React.JSX.Element
+		| Iterable<React.ReactNode>
+		| null
+		| undefined;
+	renderCustomView(): React.ReactNode;
+	renderBubbleContent(): React.JSX.Element;
+	render(): React.JSX.Element;
 }
diff --git a/node_modules/react-native-gifted-chat/lib/Bubble.js b/node_modules/react-native-gifted-chat/lib/Bubble.js
index e9eb92a..2748c19 100644
--- a/node_modules/react-native-gifted-chat/lib/Bubble.js
+++ b/node_modules/react-native-gifted-chat/lib/Bubble.js
@@ -1,15 +1,15 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import { Text, StyleSheet, TouchableWithoutFeedback, View, } from 'react-native';
+import { StyleSheet, Text, TouchableWithoutFeedback, View, } from 'react-native';
+import Color from './Color';
 import { GiftedChatContext } from './GiftedChatContext';
-import { QuickReplies } from './QuickReplies';
-import { MessageText } from './MessageText';
+import { MessageAudio } from './MessageAudio';
 import { MessageImage } from './MessageImage';
+import { MessageText } from './MessageText';
 import { MessageVideo } from './MessageVideo';
-import { MessageAudio } from './MessageAudio';
+import { QuickReplies } from './QuickReplies';
 import { Time } from './Time';
-import Color from './Color';
-import { StylePropType, isSameUser, isSameDay } from './utils';
+import { StylePropType, isSameDay, isSameUser } from './utils';
 const styles = {
     left: StyleSheet.create({
         container: {
@@ -271,33 +271,49 @@ class Bubble extends React.Component {
         </View>);
     }
     render() {
-        const { position, containerStyle, wrapperStyle, bottomContainerStyle } = this.props;
+        const { position, containerStyle, wrapperStyle, bottomContainerStyle, customWrapper, customWrapperProps } = this.props;
+
+        const wrapperStyles = [
+            styles[position].wrapper,
+            this.styledBubbleToNext(),
+            this.styledBubbleToPrevious(),
+            wrapperStyle?.[position],
+        ];
+
+        const bubbleContent = (
+            <TouchableWithoutFeedback onPress={this.onPress} onLongPress={this.onLongPress} accessibilityRole='text' {...this.props.touchableProps}>
+                <View>
+                    {this.renderBubbleContent()}
+                    <View style={[
+                        styles[position].bottom,
+                        bottomContainerStyle?.[position],
+                    ]}>
+                        {this.renderUsername()}
+                        {this.renderTime()}
+                        {this.renderTicks()}
+                    </View>
+                </View>
+            </TouchableWithoutFeedback>
+        );
+
+        const CustomWrapper = customWrapper?.[position];
+        const customProps = customWrapperProps?.[position] || {};
+
         return (<View style={[
-                styles[position].container,
-                containerStyle && containerStyle[position],
-            ]}>
-        <View style={[
-                styles[position].wrapper,
-                this.styledBubbleToNext(),
-                this.styledBubbleToPrevious(),
-                wrapperStyle && wrapperStyle[position],
-            ]}>
-          <TouchableWithoutFeedback onPress={this.onPress} onLongPress={this.onLongPress} accessibilityRole='text' {...this.props.touchableProps}>
-            <View>
-              {this.renderBubbleContent()}
-              <View style={[
-                styles[position].bottom,
-                bottomContainerStyle && bottomContainerStyle[position],
-            ]}>
-                {this.renderUsername()}
-                {this.renderTime()}
-                {this.renderTicks()}
-              </View>
-            </View>
-          </TouchableWithoutFeedback>
-        </View>
-        {this.renderQuickReplies()}
-      </View>);
+            styles[position].container,
+            containerStyle?.[position],
+        ]}>
+            {CustomWrapper ? (
+                <CustomWrapper style={wrapperStyles} {...customProps}>
+                    {bubbleContent}
+                </CustomWrapper>
+            ) : (
+                <View style={wrapperStyles}>
+                    {bubbleContent}
+                </View>
+            )}
+            {this.renderQuickReplies()}
+        </View>);
     }
 }
 Bubble.contextType = GiftedChatContext;
@@ -330,6 +346,8 @@ Bubble.defaultProps = {
     usernameStyle: {},
     containerToNextStyle: {},
     containerToPreviousStyle: {},
+    customWrapper: null,
+    customWrapperProps: {},
 };
 Bubble.propTypes = {
     user: PropTypes.object.isRequired,
@@ -374,6 +392,17 @@ Bubble.propTypes = {
         left: StylePropType,
         right: StylePropType,
     }),
+    customWrapper: PropTypes.oneOfType([
+        PropTypes.elementType,
+        PropTypes.shape({
+            left: PropTypes.elementType,
+            right: PropTypes.elementType,
+        }),
+    ]),
+    customWrapperProps: PropTypes.shape({
+        left: PropTypes.object,
+        right: PropTypes.object,
+    }),
 };
 export default Bubble;
 //# sourceMappingURL=Bubble.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-gifted-chat/src/Bubble.tsx b/node_modules/react-native-gifted-chat/src/Bubble.tsx
index 024a201..eca6393 100644
--- a/node_modules/react-native-gifted-chat/src/Bubble.tsx
+++ b/node_modules/react-native-gifted-chat/src/Bubble.tsx
@@ -1,34 +1,34 @@
 import PropTypes from 'prop-types'
 import React from 'react'
 import {
-  Text,
+  StylePropeProp,
   StyleSheet,
-  TouchableWithoutFeedback,
-  View,
-  StyleProp,
-  ViewStyle,
-  TextStyle,
+  Text
+  TextStyleStyle,
+  TouchableWithoutFeedbackWithoutFeedback,
+  View
+  type type type type ViewStyle,
 } from 'react-native'
 
 import { GiftedChatContext } from './GiftedChatContext'
-import { QuickReplies, QuickRepliesProps } from './QuickReplies'
-import { MessageText, MessageTextProps } from './MessageText'
-import { MessageImage, MessageImageProps } from './MessageImage'
+import { MessageAudio}dio'MessageAudio
+import { MessageImagee,MessageImagePropsps } from 'MessageImageage'
+import { MessageText MMessageTextProps from './MeMessageText
 import { MessageVideo } from './MessageVideo'
-import { MessageAudio } from './MessageAudio'
+import { QuickReplies, type type type type QuickRepliesProps, QuickReplQuickRepliesrom './QuickReplies'
 import { Time, TimeProps } from './Time'
 
-import Color from './Color'
-import { StylePropType, isSameUser, isSameDay } from './utils'
-import {
-  User,
+import Color from './Color
   IMessage,
-  LeftRightStyle,
+  IMessageRightStyle,
+  LeftRightStyleudioProps,
+  MessageAudioPropsops,
+  MessageVideoProps
   Reply,
-  Omit,
-  MessageVideoProps,
-  MessageAudioProps,
-} from './Models'
+  Reply
+} User
+import { StylePropType, isSameDay, isSameUser } from './utils'
+import { StylePropType, isSameDay, isSameUser } from './utils'
 
 const styles = {
   left: StyleSheet.create({
